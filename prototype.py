# -*- coding: utf-8 -*-
"""
Created on Jan 18 23:25:57 2021

Для получения графика функции a(t) применяем таблицу, которая имитирует
поток данных от датчика ускорений

Интеграл вычисляем в потоке - по мере поступления новых данных
Метод прямоугольников. (Возможен метод трапеций или Симпсона)

В данном макете программы отработана реакция на событие останова состава.
Аналогично решается вопрос определения трогания состава с места.

@author:    ln.starmark@gmail.com
            ln.starmark@ekatra.io
"""
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

###--- Можно графику отключить -----------------------------------------------
GRAPHICS_EN = 1 

###---------------------------------------------------------------------------
###--- Поток данных приходит от датчика --- Одна ось --- тест ----------------
###---------------------------------------------------------------------------
ax = [0,0,0,0,0,0,0,0,0,0,0,0,
      10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,      
      10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0 
]

len_ax = len(ax)
iter_ax = np.arange(len_ax)
print("len_ax", len_ax)



###--- Потоковый интеграл от каждого следующего значения функции ----
def intgr(cns, f , dlt):
    return (cns + (f * dlt))
###------------------------------------------------------------------   
    
###--- Все обнулить -------------------------------------------------
fnc = []        ###--- Для отрисовки данных потока по  оси X 

ingr1 = []      ###--- Для отрисовки 1-го интеграла от функции
ingr2 = []      ###--- Для отрисовки 2-го интеграла  

dlt = 1         ###--- интервал по оси времени 

###--- Переменные для контроля смены режима движения ---------------
fl_Stop = 0     ###--- Сигнал останова состава  
fl_Start = 1    ###--- Сигнал трогания состава

###--- Организация пустого цикла для задержки, т.к. time.time() ----
###--- слишком быстро тикает ---------------------------------------
a = 0
def Delay(dt):
    global a
    for i in range(0,dt):
        a += 1
    a = 0    

def Reset_vars():
    global X
    global X_old     
    X = 0
    X_old = 0
    
    Y = 0
    Y_old = 0

  
def Graphics():
    if(GRAPHICS_EN == 1):
        df = pd.DataFrame(ax)
        df.plot(figsize=(15, 10))  
    
        df_V = pd.DataFrame(ingr1)
        df_V.plot(figsize=(15, 10))
    
        df_S = pd.DataFrame(ingr2)
        df_S.plot(figsize=(15, 10))   
      

###--- Основная рабочая функция -------------------------------------
###--- минимальное превышение X_epsilon при контроле остановки 
###--- минимальное превышение X_start_epsilon при старте состава
###--- tim_threshould контрольное время
def wrk(X_epsilon, X_start_epsilon, tim_threshould):
    V = 0               ###--- Скорость
    V_old = 0
    X = 0               ###--- Перемещение
    X_old = 0
    
    global fl_Stop      ###--- Сигнал останова состава  
    global fl_Start     ###--- Сигнал трогания состава
    
 
    timing = time.time()
    for tim in iter_ax:
        
        ###--- Ускорение ax(t) получаем из датчика ------------------
      
            
        ###--- Первый интеграл - скорость V -------------------------
        V = intgr(V, ax[tim] , dlt)
        if(GRAPHICS_EN == 1):
            ingr1.append(V)     ###--- только для графика
        
        ###--- Второй интеграл - перемещение X ----------------------
        X = intgr(X, V, dlt)
        
        if(GRAPHICS_EN == 1):
            ingr2.append(X)     ###--- только для графика
        
        if(fl_Stop == 0):
            if(abs(X - X_old) < X_epsilon):
                if ((time.time() - timing) > tim_threshould):
                    print("********* Train in stop status ", X)
                    fl_Stop = 1
                    fl_Start = 0
                    Reset_vars()
                    timing = time.time()
            else:
                timing = time.time()
                
        if(fl_Start == 0):
             if(abs(X - X_old) > X_start_epsilon):
                if ((time.time() - timing) < tim_threshould):
                    print("********* Train in start status ", X)
                    fl_Stop = 0
                    fl_Start = 1
                    Reset_vars()
                    timing = time.time()
             else:
                timing = time.time() 
               
 
        X_old = X
        
        
   

  
###=== Процесс пошел ================================================   
wrk(0.1, 0.1, 0.5)  
Graphics()  
###==================================================================



